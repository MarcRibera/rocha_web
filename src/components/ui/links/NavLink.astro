---
// Destructure the properties from Astro.props
const { url, name } = Astro.props;

// Define TypeScript interface for the properties
interface Props {
  url: string;
  name: string;
}
---

<!--
Re-usable link component for navigation bar. Highlights the active link
by comparing the current URL with the href of each link.
We assign an ID matching the URL for easy reference in our script.
If URL is '/' (home page), assign ID as 'home' 
-->
<a
  id={url === "/" ? "home" : url.replace("/", "")}
  href={url}
  data-astro-prefetch
  class="rounded-lg text-base font-medium text-neutral-600 outline-none ring-zinc-500 hover:text-neutral-500 focus-visible:ring dark:text-neutral-400 dark:ring-zinc-200 dark:hover:text-neutral-500 dark:focus:outline-none md:py-3 md:text-sm 2xl:text-base"
>
  {name}
</a>


<script>
window.addEventListener('hashchange', function() {
  
  let url = window.location.hash;
  let navId;

  console.log(url);

  if (url === "/") {
    navId = "home";
  } else {
    navId = url
  }

  console.log(navId)
  let navBar = document.getElementById("navbar-collapse-with-animation");
  if (navBar) {
    const links = navBar.querySelectorAll('a');
    links.forEach(link => {
      link.classList.remove(
        "text-orange-400", "dark:text-yellow-400"
      );
      if(link.id === navId) {
        link.classList.add("text-orange-400", "dark:text-yellow-400");
      }
    });
  }

  // Hide the collapse
  // TODO: should be a function and executed on click
  const HSCollapse = window.HSCollapse
  HSCollapse.hide('.hs-collapse-toggle')
});

  document.addEventListener("DOMContentLoaded", function () {
    // on load page set the active nav item
     let homeNavItem = document.getElementById("home");

    if (homeNavItem) {
      homeNavItem.classList.add("text-orange-400", "dark:text-yellow-400");
      homeNavItem.setAttribute("aria-current", "page");
    }
  });
</script>
